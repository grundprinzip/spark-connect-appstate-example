<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>de.grundprinzip.appstate</groupId>
  <artifactId>appstate</artifactId>
  <version>0.0.1</version>

  <properties>
    <spark.shade.packageName>org.sparkproject</spark.shade.packageName>
    <scala-maven-plugin.version>4.8.0</scala-maven-plugin.version>
    <CodeCacheSize>128m</CodeCacheSize>
    <scala.binary.version>2.12</scala.binary.version>
    <scala.version>2.12.17</scala.version>
    <protobuf.version>3.22.0</protobuf.version>
    <io.grpc.version>1.47.0</io.grpc.version>
    <java.version>1.8</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-sql_2.12</artifactId>
      <version>3.5.0-SNAPSHOT</version>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-connect_2.12</artifactId>
      <version>3.5.0-SNAPSHOT</version>
      <scope>provided</scope>
      <exclusions>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>3.22.0</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.scala-lang.modules</groupId>
      <artifactId>scala-xml_${scala.binary.version}</artifactId>
      <version>2.1.0</version>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-compiler</artifactId>
      <version>${scala.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.scala-lang.modules</groupId>
          <artifactId>scala-xml_2.12</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-reflect</artifactId>
      <version>${scala.version}</version>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>
    <dependency>
      <groupId>org.scala-lang.modules</groupId>
      <artifactId>scala-parser-combinators_${scala.binary.version}</artifactId>
      <version>2.2.0</version>
    </dependency>
  </dependencies>
  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-shade-plugin</artifactId>
          <version>3.4.1</version>
          <dependencies>
            <dependency>
              <groupId>org.ow2.asm</groupId>
              <artifactId>asm</artifactId>
              <version>9.4</version>
            </dependency>
            <dependency>
              <groupId>org.ow2.asm</groupId>
              <artifactId>asm-commons</artifactId>
              <version>9.4</version>
            </dependency>
          </dependencies>
        </plugin>
        <plugin>
          <groupId>net.alchim31.maven</groupId>
          <artifactId>scala-maven-plugin</artifactId>
          <version>${scala-maven-plugin.version}</version>
          <executions>
            <execution>
              <id>eclipse-add-source</id>
              <goals>
                <goal>add-source</goal>
              </goals>
            </execution>
            <execution>
              <id>scala-compile-first</id>
              <goals>
                <goal>compile</goal>
              </goals>
            </execution>
            <execution>
              <id>scala-test-compile-first</id>
              <goals>
                <goal>testCompile</goal>
              </goals>
            </execution>
            <execution>
              <id>attach-scaladocs</id>
              <phase>verify</phase>
              <goals>
                <goal>doc-jar</goal>
              </goals>
            </execution>
          </executions>
          <configuration>
            <scalaVersion>${scala.version}</scalaVersion>
            <checkMultipleScalaVersions>true</checkMultipleScalaVersions>
            <failOnMultipleScalaVersions>true</failOnMultipleScalaVersions>
            <recompileMode>incremental</recompileMode>
            <args>
              <arg>-unchecked</arg>
              <arg>-deprecation</arg>
              <arg>-feature</arg>
              <arg>-explaintypes</arg>
              <arg>-target:jvm-1.8</arg>
              <arg>-Xfatal-warnings</arg>
              <arg>-Ywarn-unused:imports</arg>
              <arg>-P:silencer:globalFilters=.*deprecated.*</arg>
            </args>
            <jvmArgs>
              <jvmArg>-Xss128m</jvmArg>
              <jvmArg>-Xms4g</jvmArg>
              <jvmArg>-Xmx4g</jvmArg>
              <jvmArg>-XX:MaxMetaspaceSize=2g</jvmArg>
              <jvmArg>-XX:ReservedCodeCacheSize=${CodeCacheSize}</jvmArg>
            </jvmArgs>
            <javacArgs>
              <javacArg>-source</javacArg>
              <javacArg>${java.version}</javacArg>
              <javacArg>-target</javacArg>
              <javacArg>${java.version}</javacArg>
              <javacArg>-Xlint:all,-serial,-path,-try</javacArg>
            </javacArgs>
            <compilerPlugins>
              <compilerPlugin>
                <groupId>com.github.ghik</groupId>
                <artifactId>silencer-plugin_${scala.version}</artifactId>
                <version>1.7.10</version>
              </compilerPlugin>
            </compilerPlugins>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
    <!-- Protobuf compilation for Spark Connect -->
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>1.6.2</version>
      </extension>
    </extensions>
    <outputDirectory>target/scala-2.12/classes</outputDirectory>
    <testOutputDirectory>target/scala-2.12/test-classes</testOutputDirectory>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>add-sources</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/main/scala-2.12</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>add-scala-test-sources</id>
            <phase>generate-test-sources</phase>
            <goals>
              <goal>add-test-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>src/test/gen-java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- Shade all GRPC / Guava / Protobuf dependencies of this build -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <configuration>
          <shadedArtifactAttached>false</shadedArtifactAttached>
          <artifactSet>
            <includes>
              <include>com.google.guava:*</include>
              <include>io.grpc:*:</include>
              <include>com.google.protobuf:*</include>

              <!--
                The dependencies below are not added in SBT because SBT add them all
                as assembly build.
              -->
              <include>com.google.android:annotations</include>
              <include>com.google.api.grpc:proto-google-common-protos</include>
              <include>io.perfmark:perfmark-api</include>
              <include>org.codehaus.mojo:animal-sniffer-annotations</include>
              <include>com.google.errorprone:error_prone_annotations</include>
              <include>com.google.j2objc:j2objc-annotations</include>
              <include>org.checkerframework:checker-qual</include>
              <include>com.google.code.gson:gson</include>
              <include>org.apache.spark:spark-connect-common_2.12</include>
            </includes>
          </artifactSet>
          <relocations>
            <relocation>
              <pattern>com.google.common</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.guava</shadedPattern>
              <includes>
                <include>com.google.common.**</include>
              </includes>
            </relocation>
            <relocation>
              <pattern>com.google.thirdparty</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.guava</shadedPattern>
              <includes>
                <include>com.google.thirdparty.**</include>
              </includes>
            </relocation>
            <relocation>
              <pattern>com.google.protobuf</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.protobuf</shadedPattern>
              <includes>
                <include>com.google.protobuf.**</include>
              </includes>
            </relocation>
            <relocation>
              <pattern>io.grpc</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.grpc</shadedPattern>
            </relocation>

            <relocation>
              <pattern>android.annotation</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.android_annotation</shadedPattern>
            </relocation>
            <relocation>
              <pattern>io.perfmark</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.io_perfmark</shadedPattern>
            </relocation>
            <relocation>
              <pattern>org.codehaus.mojo.animal_sniffer</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.animal_sniffer</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.google.j2objc.annotations</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.j2objc_annotations</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.google.errorprone.annotations</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.errorprone_annotations</shadedPattern>
            </relocation>
            <relocation>
              <pattern>org.checkerframework</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.checkerframework</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.google.gson</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.gson</shadedPattern>
            </relocation>

            <!--
              For `com.google.api.grpc:proto-google-common-protos`, do not directly define pattern
              as `common.google`, otherwise, otherwise, the relocation result may be uncertain due
              to the change of rule order.
            -->
            <relocation>
              <pattern>com.google.api</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.google_protos.api</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.google.cloud</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.google_protos.cloud</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.google.geo</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.google_protos.geo</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.google.logging</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.google_protos.logging</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.google.longrunning</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.google_protos.longrunning</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.google.rpc</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.google_protos.rpc</shadedPattern>
            </relocation>
            <relocation>
              <pattern>com.google.type</pattern>
              <shadedPattern>${spark.shade.packageName}.connect.google_protos.type</shadedPattern>
            </relocation>
          </relocations>
          <transformers>
            <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
          </transformers>
        </configuration>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
      </plugin>
      <!-- Add protobuf-maven-plugin and provide ScalaPB as a code generation plugin -->
      <plugin>
        <groupId>org.xolstice.maven.plugins</groupId>
        <artifactId>protobuf-maven-plugin</artifactId>
        <version>0.6.1</version>
        <configuration>
          <protocArtifact>com.google.protobuf:protoc:${protobuf.version}:exe:${os.detected.classifier}</protocArtifact>
          <pluginId>grpc-java</pluginId>
          <pluginArtifact>io.grpc:protoc-gen-grpc-java:${io.grpc.version}:exe:${os.detected.classifier}</pluginArtifact>
          <protoSourceRoot>src/main/protobuf</protoSourceRoot>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>compile-custom</goal>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>